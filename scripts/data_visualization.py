# -*- coding: utf-8 -*-
"""data_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_EXlwYFup-W9a5M8wFcQo5FUSCDbwRmD
"""

# import libraries
import numpy as np
import librosa
from PIL import Image
import PIL.Image
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import IPython.display as ipd
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.io as pio
from IPython.display import Image
from mpl_toolkits.axes_grid1 import make_axes_locatable
import librosa.display
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import logging
import os
logging.basicConfig(filename='..\logs\model.log', filemode='w', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',level=logging.INFO)




def read_file_data_set(path_to_csv): #function to load our csv file
  try:
    print("===== Reading Dataset ===== \n ")
    logging.info("====== Redaing Dataset ====== ")
    data=pd.read_csv(path_to_csv)
    print(" ==== Successfuly read dataset ===== \n")
  except FileNotFoundError as e:    
    logging.info(" !!!! File Not Found Error  !!!! ")
    print(" !!!! The system ran into a File Not Found Erro !!! \n ")
    print(error.__class__.__name__ + ": " + error.message)
  except OSError as err:
    logging.info(" !!!! OS error  !!!! ")
    print("OS error: {0}".format(err))
  return data

def get_wc(df, column, stop_words,mask): #function to plot a worldcloud
  try:
    logging.info("===================== plotting a wordcloud ==================== \n")
    print ("===================== plotting a wordcloud ================= \n ")
    plt.figure(figsize=(25, 15))
    wordcloud = WordCloud( max_words=5000,
                          background_color="salmon", width=3000, height=2000, colormap='Pastel1',
                          collocations=False, stopwords=stop_words, mask=mask).generate(' '.join(df[column].values))
    plt.imshow(wordcloud)
    plt.axis('off')
    plt.title('Most Frequent Words In Swahili Audio Transcription', fontsize=16)
  except Exception as e:
    print (" !!!! Error !!!! ")
    print (" !!!! The system raised an exception {} !!!!!".format(e.__class__))
  plt.show()

def add_root(x): #function to specify our root directory
  logging.info("===================== adding root directory ==================== \n")
  try:
    location_directory='/content/drive/MyDrive/speech _to _text/data/alldata'
    logging.info(" !!!! creating location column !!!! ")
    x=os.path.join(location_directory,x)
  except Exception as e:
    print (" !!!! Error !!!! ")
    print (" !!!! The system raised an exception {} !!!!!".format(e.__class__))

  return x


def play_audio(audio_path):   # function to play audio file
  try:
    logging.info(" ============ playing audio file ================= ")
    print(" ============ playing audio file ================= ")
    sig, sr = librosa.load(audio_path)
  except Exception as e:
    print (" !!!! Error !!!! ")
    print (" !!!! The system raised an exception {} !!!!!".format(e.__class__))
  return(ipd.Audio(sig,rate = sr))

def plot_hist(df:pd.DataFrame, column:str, color:str)->None: #plotting histogram
  try:
    logging.info("===================== plotting histogram ==================== \n")
    print ("===================== plotting histogram ================= \n ")
    sns.displot(data=df, x=column, color=color, kde=True, height=7, aspect=2)
    plt.title(f'Distribution of {column}', size=20, fontweight='bold')
  except Exception as e:
    print (" !!!! Error !!!! ")
    print (" !!!! The system raised an exception {} !!!!!".format(e.__class__))
    plt.show()

def plot_box(df:pd.DataFrame, x_col:str, title:str) -> None: # plotting boxplot
  logging.info("===================== plotting box plot ==================== \n")
  print ("===================== plotting box plot ================= \n ")
  try:
    plt.figure(figsize=(12, 7))
    sns.boxplot(data = df, x=x_col)
    plt.title(title, size=20)
    plt.xticks(rotation=75, fontsize=14)
  except Exception as e:
    print (" !!!! Error !!!! ")
    print (" !!!! The system raised an exception {} !!!!!".format(e.__class__))
    plt.show()
    


def wav_plot(audio_path): #plotting wave plot of audio
  try:
    logging.info("====== Redaing the audio ====== ")
    sig, sr = librosa.load(audio_path)
    logging.info(" !!!! plotting audio wave plot !!!! ")
    print(" !!!! plotting audio wave plot !!!! ")
    plt.figure(figsize=(24, 4))
    librosa.display.waveplot(sig, sr=44100)
  except Exception as e:
    print (" !!!! Error !!!! ")
    print (" !!!! The system raised an exception {} !!!!!".format(e.__class__))
  plt.show()

def plot_mfcc_feature(self, vis_mfcc_feature): #plotting MFCC
  logging.info("===================== plotting MFCC ==================== \n")
  print ("===================== plotting MFCC ================= \n ")
  try:
    fig = plt.figure(figsize=(12, 5))
    ax = fig.add_subplot(111)
    im = ax.imshow(vis_mfcc_feature, cmap=plt.cm.jet, aspect='auto')
    plt.title('Normalized MFCC')
    plt.ylabel('Time')
    plt.xlabel('MFCC Coefficient')
    divider = make_axes_locatable(ax)
    cax = divider.append_axes("right", size="5%", pad=0.05)
    plt.colorbar(im, cax=cax)
    ax.set_xticks(np.arange(0, 13, 2), minor=False)
  except Exception as e:
    print (" !!!! Error !!!! ")
    print (" !!!! The system raised an exception {} !!!!!".format(e.__class__))
  plt.show()

def plot_spectrogram_feature(self, vis_spectrogram_feature): # plotting spectrogram
  logging.info("===================== plotting spectrogram ==================== \n")
  print ("===================== plotting spectrogram ================= \n ")
  try:
    fig = plt.figure(figsize=(12, 5))
    ax = fig.add_subplot(111)
    im = ax.imshow(vis_spectrogram_feature, cmap=plt.cm.jet, aspect='auto')
    plt.title('Normalized Spectrogram')
    plt.ylabel('Time')
    plt.xlabel('Frequency')
    divider = make_axes_locatable(ax)
    cax = divider.append_axes("right", size="5%", pad=0.05)
    plt.colorbar(im, cax=cax)
  except Exception as e:
    print (" !!!! Error !!!! ")
    print (" !!!! The system raised an exception {} !!!!!".format(e.__class__))
  plt.show()


if __name__ == "__main__":