# -*- coding: utf-8 -*-
"""metadata_generation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i-ecGfstCVNdtHvnSs1jhEeWt5htFRGr

### CREATION OF METADATA TO BE USED IN PREPROCESSING
"""

from google.colab import drive
drive.mount('/content/drive')

#changing the working directory
cd '/content/drive/MyDrive/speech _to _text'

# import libraries
import os
from scipy.io import wavfile
import librosa
import numpy as np
import matplotlib.pyplot as plt
import random
import pandas as pd
import shutil
import logging
import wave
import contextlib

logging.basicConfig(filename='..\logs\model.log', filemode='w', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',level=logging.INFO)

directory='/content/drive/MyDrive/Week-4/speech_data/ALFFA_PUBLIC/ASR/SWAHILI/data/train/wav'
files=[]
target='/content/drive/MyDrive/speech _to _text/data/alldata'
def files_to_one_folder():
  logging.info("===================== copying files from different folders to one folder ==================== \n")

  for folders in os.listdir(directory):
    #accessing subfolders inside train/wav directory
    subfolder = os.path.join(directory,folders)
    #looping through all contents in the subfolder
    for wavz in os.listdir(subfolder):
      files.append(wavz)
      finalpath = os.path.join(subfolder,wavz)
      # copying files
      shutil.copy(finalpath, target)
      print('==========DONE COPYING FILES===========/n')

#extracting text file and create transcriptions with their corresponding file names
def get_trans_labels():
  logging.info("===================== extracting transcripts and labels from txt file ==================== \n")
  
  with open ('/content/drive/MyDrive/Week-4/speech_data/ALFFA_PUBLIC/ASR/SWAHILI/data/train/text.txt', encoding="utf-8")as f:
    lines = f.readlines()
  name=[] 
  text =[]
  name_text={}
  for line in lines :
    for elements in line.split(" ", 0):
      b = elements.split('\t')
      # name.append(b[0] +'.wav')
      name.append(b[0] )
      text.append(b[1].split('\n')[0])
      name_text[b[0] +'.wav']=b[1].split('\n')[0]

#calculate duration of audios
def audio_duration():

  logging.info("===================== calculating the duration of each audio file  ==================== \n")

  duration_of_recordings=[]
  for file in os.listdir(target):
    with contextlib.closing(wave.open(target+'/'+file,'r')) as f:
      frames = f.getnframes()
      rate = f.getframerate()
      duration = frames / float(rate)
      duration_of_recordings.append(round(duration, 2))

# creating a cvs file of file name with its corresponding text and its duration
def metadata():
  logging.info("======= # creating a cvs file of file name with its corresponding text and its duration ================= \n")
  # creating a list of files
  files=[]
  #getting files from their directory
  for file in os.listdir(target):
    files.append(file)
  # creating a dataframe 
  data=pd.DataFrame({'name_of_audio_file': files  ,'text': text, 'duration':duration_of_recordings})
  # saving the dataframe to a choosen directory
  data.to_csv("/content/drive/MyDrive/speech _to _text/data/merged_audio_data.csv",index=False)
  print(data.head(10))

#CALLING FUNCTIONS
if (__name__== '__main__'):
    # files_to_one_folder()
    get_trans_labels()
    audio_duration()
    metadata()